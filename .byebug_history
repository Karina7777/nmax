continue
number_arr
continue
number_arr
continue
number_arr
continue
new_el_arr
letter
new_el_arr
new_el_arr.to_s.length
new_el_arr.to_s.length > 1
new_el_arr.to_s.length
new_el_arr
continue
new_el_arr
continue
number_arr
continue
number_arr
new_el_arr
continue
new_el_arr
continue
new_el_arr
continue
new_el_arr
continue
new_el_arr
continue
new_el_arr
continue
new_el_arr
continue
new_el_arr
continue
new_el_arr
continue
new_el_arr
continue
new_el_arr
continue
new_el_arr
continue
new_el_arr
continue
new_el_arr
continue
new_el_arr
continue
new_el_arr
continue
new_el_arr
continue
new_el_arr
arr_numbers
continue
number_arr
continue
ar
continue
ar
continue
arr_text[index + 1]
new_el_arr
continue
new_el_arr
continue
new_el_arr
continue
new_el_arr
continue
new_el_arr
continue
'fdsfsddsffds'.split('').each_with_index do |letter, index| puts index end
number + (modulo * 10) + appendible_digit
number = (source_digit / 10) * 100
modulo = source_digit % 10
appendible_digit = 6
source_digit = 1274
number + (modulo * 10) + appendible_digit
number = (source_digit / 10) * 100
modulo = source_digit % 10
appendible_digit = 6
source_digit = 127
number + (modulo * 10) + appendible_digit
appendible_digit = 6
number = (source_digit / 10) * 100
source_digit = 123
two_digit_number = any_number % 100  
any_number = 1234
t.to_f.to_s == t.to_s || t.to_i.to_s == t.to_s
t = 4
t.to_f.to_s == t.to_s || t.to_i.to_s == t.to_s
t = 'b'
'dsf'.to_s.to_s
'dsf'.to_s
'dsf'.to_i
'dsf'.is_number?
a.quantity_max_numbers
a.data_in_file
a
continue
a.data_in_file
a
a.
continue
a.data_in_file
a
a.data_in_file
continue
Nmax::Nmax.new
a = Nmax.new('dfjlsklfjd', 34)
continue
Nmax::VERSION
continue
Nmax::Nmax.new
Nmax::A
continue
Nmax.class
Nmax
Nmax.new('dfjlsklfjd', 34)
